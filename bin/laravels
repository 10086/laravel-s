#!/usr/bin/env php
<?php
$basePath = realpath(__DIR__ . '/../');
include $basePath . '/vendor/autoload.php';

$args = array_slice($argv, 2);
$lvs = new GoLaravelS($basePath, $args);

$action = isset($argv[1]) ? $argv[1] : null;
switch ($action) {
    case 'start':
        $lvs->start();
        break;
    case 'stop':
        $lvs->stop();
        break;
    case 'restart':
        $lvs->restart();
        break;
    case 'reload':
        $lvs->reload();
        break;
    default:
        $lvs->log('Usage: bin/laravels start|stop|restart|reload');
        break;
}

class GoLaravelS
{
    protected $basePath;
    protected $arguments;
    protected $config = [];

    public function __construct($basePath, array $arguments = [])
    {
        $this->basePath = $basePath;
        $this->arguments = $arguments;

        // Initialize configuration config/laravels.json
        $cmd = trim('laravels config ' . implode(' ', $arguments));
        $this->runArtisanCommand($cmd);
    }

    public function artisanCmd($subCmd = null)
    {
        $phpCmd = sprintf('%s -c "%s"', PHP_BINARY, php_ini_loaded_file());
        $artisanCmd = sprintf('%s %s/artisan', $phpCmd, $this->basePath);
        if ($subCmd !== null) {
            $artisanCmd .= ' ' . $subCmd;
        }
        return $artisanCmd;
    }

    public function runArtisanCommand($cmd)
    {
        $cmd = $this->artisanCmd($cmd);
        self::runCommand($cmd);
    }

    public function getConfig()
    {
        if (empty($this->config)) {
            $json = file_get_contents($this->basePath . '/config/laravels.json');
            $this->config = (array)json_decode($json, true);
        }
        return $this->config;
    }

    public function start()
    {
        // Show info
        $this->runArtisanCommand('laravels info');

        // Here we go...
        $config = $this->getConfig();
        (new Hhxsv5\LaravelS\LaravelS($config['svrConf'], $config['laravelConf']))->run();
    }

    public function stop()
    {
        $config = $this->getConfig();
        $pidFile = $config['svrConf']['swoole']['pid_file'];
        if (!file_exists($pidFile)) {
            $this->log('It seems that LaravelS is not running.', 'WARN');
            return;
        }

        $pid = file_get_contents($pidFile);
        if (self::kill($pid, 0)) {
            if (self::kill($pid, SIGTERM)) {
                // Make sure that master process quit
                $time = 1;
                $waitTime = 60;
                while (self::kill($pid, 0)) {
                    if ($time > $waitTime) {
                        $this->log(
                            "PID[{$pid}] cannot be stopped gracefully in {$waitTime}s, will be stopped forced right now.",
                            'WARN'
                        );
                        return;
                    }
                    $this->log("Waiting PID[{$pid}] to stop. [{$time}]");
                    sleep(1);
                    $time++;
                }
                if (file_exists($pidFile)) {
                    unlink($pidFile);
                }
                $this->log("PID[{$pid}] is stopped.");
            } else {
                $this->log("PID[{$pid}] is stopped failed.", 'ERROR');
            }
        } else {
            $this->log("PID[{$pid}] does not exist, or permission denied.", 'ERROR');
            if (file_exists($pidFile)) {
                unlink($pidFile);
            }
        }
    }

    public function restart()
    {
        $this->stop();
        $this->start();
    }

    public function reload()
    {
        $config = $this->getConfig();
        $pidFile = $config['svrConf']['swoole']['pid_file'];
        if (!file_exists($pidFile)) {
            $this->log('It seems that Swoole is not running.', 'ERROR');
            return;
        }

        $pid = file_get_contents($pidFile);
        if (!$pid || !self::kill($pid, 0)) {
            $this->log("PID[{$pid}] does not exist, or permission denied.", 'ERROR');
            return;
        }

        if (self::kill($pid, SIGUSR1)) {
            $now = date('Y-m-d H:i:s');
            $this->log("PID[{$pid}] is reloaded at {$now}.");
            return;
        } else {
            $this->log("PID[{$pid}] is reloaded failed.", 'ERROR');
            return;
        }
    }

    public function log($msg, $level = 'info')
    {
        $cmd = sprintf('laravels output --level=%s --content=%s', strtolower($level), base64_encode($msg));
        $this->runArtisanCommand($cmd);
    }

    public static function runCommand($cmd, $input = null)
    {
        $fp = popen($cmd, 'w');
        if ($fp === false) {
            return false;
        }
        if ($input !== null) {
            fwrite($fp, $input);
        }
        pclose($fp);
        return true;
    }

    public static function kill($pid, $sig)
    {
        try {
            return Swoole\Process::kill($pid, $sig);
        } catch (\Exception $e) {
            return false;
        }
    }
}